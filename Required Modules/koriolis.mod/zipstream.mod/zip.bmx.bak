SuperStrict

Rem
bbdoc: Zip support. Uses ZLib. Loosely based on ZipEngine.
End Rem
Module koriolis.zip


Import pub.zlib
Import brl.basic
Import brl.stream
Import brl.system
Import brl.retro
Import "zip.c"
Import "unzip.c"
Import "ioapi.c"
'Import "bmxsupport.c"

Private

Rem
bbdoc: Append Modes
End Rem
Const APPEND_STATUS_CREATE:Int			= 0
Const APPEND_STATUS_CREATEAFTER:Int		= 1
Const APPEND_STATUS_ADDINZIP:Int		= 2

Rem
bbdoc: Compression methods
End Rem
Const Z_DEFLATED:Int					= 8

Rem
bbdoc: Compression levels
End Rem
Const Z_NO_COMPRESSION:Int				= 0
Const Z_BEST_SPEED:Int				= 1
Const Z_BEST_COMPRESSION:Int			= 9
Const Z_DEFAULT_COMPRESSION:Int		= -1

Rem
bbdoc: Compare modes
End Rem
Const UNZ_CASE_CHECK:Int				= 1
Const UNZ_NO_CASE_CHECK:Int			= 2

Rem
bbdoc: Result Codes
End Rem
Const UNZ_OK:Int						= 0
Const UNZ_END_OF_LIST_OF_FILE:Int		= -100
Const UNZ_EOF:Int						= 0
Const UNZ_PARAMERROR:Int				= -102
Const UNZ_BADZIPFILE:Int				= -103
Const UNZ_INTERNALERROR:Int			= -104
Const UNZ_CRCERROR:Int				= -105

Extern

Rem
bbdoc: Open new zip file (returns zipFile pointer)
End Rem
Function zipOpen:Byte Ptr( fileName$z, append:Int )

Rem
bbdoc: Closes an open zip file
End Rem
Function zipClose( zipFilePtr:Byte Ptr, archiveName$z )

Rem
bbdoc: Open a file inside the zip file
End Rem
Function zipOpenNewFileInZip( zipFilePtr:Byte Ptr, fileName$z, zip_fileinfo:Byte Ptr, ..
							extrafield_local:Byte Ptr, size_extrafield_local:Int, ..
							extrafield_global:Byte Ptr, size_extrafield_global:Int, ..
							comment$z, compressionMethod:Int, ..
							level:Int )
							
Rem
bbdoc: Open a file inside the zip file using a password
End Rem
Function zipOpenNewFileWithPassword( zipFilePtr:Byte Ptr, fileName$z, zip_fileinfo:Byte Ptr, ..
							extrafield_local:Byte Ptr, size_extrafield_local:Int, ..
							extrafield_global:Byte Ptr, size_extrafield_global:Int, ..
							comment$z, compressionMethod:Int, ..
							level:Int, password$z )

Rem
bbdoc: Write into a zip file
End Rem
Function zipWriteInFileInZip( zipFilePtr:Byte Ptr, buffer:Byte Ptr, bufferLength:Int )

Rem
bbdoc: Open a zip file for unzip
End Rem
Function unzOpen:Byte Ptr( zipFileName$z )

Rem
bbdoc: Open a zip file for unzip, using the specified IO functions
End Rem
Function unzOpen:Byte Ptr( zipFileName$z )

Rem
bbdoc: Return status of desired file and sets the unzipped focus to it
End Rem
Function unzLocateFile:Int( zipFilePtr:Byte Ptr, fileName$z, caseCheck:Int )

Rem
bbdoc: Opens the currently focused file
End Rem
Function unzOpenCurrentFile:Int( zipFilePtr:Byte Ptr )

Rem
bbdoc: Opens the currently focused file using a password
End Rem
Function unzOpenCurrentFilePassword:Int(file:Byte Ptr, password$z)

Rem
bbdoc: Gets info about the current file
End Rem
Function unzGetCurrentFileSize:Int( zipFilePtr:Byte Ptr )

Rem
bbdoc: Read current file, returns number of bytes
End Rem
Function unzReadCurrentFile:Int( zipFilePtr:Byte Ptr, buffer:Byte Ptr, size:Int )

Rem
bbdoc: Close current file
End Rem
Function unzCloseCurrentFile( zipFilePtr:Byte Ptr )

Rem
bbdoc: Close unzip zip file
End Rem
Function unzClose( zipFilePtr:Byte Ptr )

EndExtern


